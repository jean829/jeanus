#include  <iostream>
using  namespace  std;
const  int  pi=3.14159;
class Shape
{
public:
    Shape(int i);
    void setter(int m_ID1);
    int getter();
    int getArea();
    ~Shape();
private:
     int m_ID;
};
Shape::Shape(int i)
{
    m_ID=i;
    cout<<"Shape constructor called:"<<m_ID<<endl;
}
void Shape::setter(int m_ID1)
{
    m_ID=m_ID1;
}
int Shape::getter()
{
    return m_ID;
}
int Shape::getArea()
{
    return 0;
}
Shape::~Shape()
{
    cout<<"Shape destructor called:"<<m_ID<<endl;
}
class Circle:public Shape
{
public:
    Circle(int r1,int m_ID);
    void setter(int i);
    int getterr();
    int getArea();
    ~Circle();
private:
    int r;
};
Circle::Circle(int r1,int m_ID1):Shape(m_ID1)
{
    r=r1;
    cout<<"Circle constructor called:"<<getter()<<endl;
}
Circle::~Circle()
{
    cout<<"Circle destructor called:"<<getter()<<endl;
}
int Circle::getterr()
{
    return r;
}
int Circle::getArea()
{
    return pi*getterr()*getterr();
}
class Rectangle:public Shape
{
public:
    Rectangle(int h1,int w1,int m_ID2);
       void setterh(int h1);
       void setterw(int w1);
       int getterh();
       int getterw();
       int getArea();
       ~Rectangle();
private:
    int h,w;
};
Rectangle::Rectangle(int h1,int w1,int m_ID2):Shape(m_ID2)
{
    h=h1;w=w1;
    cout<<"Rectangle constructor called:"<<getter()<<endl;
}
Rectangle::~Rectangle()
{
    cout<<"Rectangle destructor called:"<<getter()<<endl;
}
void Rectangle::setterw(int w1)
{
    w=w1;
}
void Rectangle::setterh(int h1)
{
    h=h1;
}
int Rectangle::getterh()
{
    return h;
}
int Rectangle::getterw()
{
    return w;
}
int Rectangle::getArea()
{
    return getterh()*getterw();
}
int  main()
{
        Shape  s(1);//1表示ID
        Circle  c(4,2);//4表示半径，2表示ID
        Rectangle  r(4,  5,3);//4和5表示长和宽，3表示ID
        cout<<"Shape的面积"<<s.getArea()<<endl;
        cout<<"Circle的面积"<<c.getArea()<<endl;
        cout<<"Rectangle的面积"<<r.getArea()<<endl;
}
