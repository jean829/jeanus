#include<iostream>
#include<cstring>
using namespace std;
#define max 100
typedef struct node
{
    int data;
    int depth; //深度
    struct node *lchild, *rchild;
}BTNode, *BTREE;
int a[max][2];        //[0]节点值 [1]深度
BTREE create_BT()
{
    BTREE stack[max],p=NULL,T=NULL;
    char ch,s[max];
    int flag=0,top=-1,i=0,x=0; long int len;
    cin>>s;
    len=strlen(s);
    while(1)
    {
        x=0;
        ch=s[i];
        if(s[i] >='0'&& s[i]<='9')//数字转换
        {
            while(s[i] >= '0' && s[i] <= '9')
            {
                x=x*10+s[i]-'0';
                i++;
            }
        }
        else
            i++;//读下一个字符
        if(ch=='\n'||i>= len) //'\n'或者是s[]到头
            return T;
        else
        {
            switch(ch)
            {
                case '(':  stack[++top]=p;
                           flag=1;
                           break;
                case ')':  top--;
                           break;
                case ',':  flag=2;
                           break;
                default :  p=(BTREE)malloc(sizeof(BTNode));
                           p->data=x;
                           p->depth=0;
                           p->lchild=NULL;
                           p->rchild=NULL;
                           if(T==NULL)
                           {
                                T=p;
                                p->depth=1;            //记录深度
                           }
                           else if(flag==1)
                                {
                                    stack[top]->lchild=p;
                                    p->depth=top+2;    //记录深度
                                }
                           else
                                {
                                    stack[top]->rchild=p;
                                    p->depth=top+2;    //记录深度
                                }
            }
        }
    }
}
int layer(BTREE T)
{
    BTREE queue[max],p;
    int front,rear,i=0;
    if(T!=NULL)
    {
        queue[0]=T;
        front=-1;
        rear=0;
        while(front<rear)
        {
            p=queue[++front];
            a[i][0]=p->data;
            a[i++][1]=p->depth;      //节点记录
            if(p->rchild!=NULL)     //从右至左遍历
                queue[++rear]=p->rchild;
            if(p->lchild!=NULL)
                queue[++rear]=p->lchild;
        }
    }
    return --i;         //返回节点个数
}
 
int main()
{
    BTREE T;
    int i=0,deep;
    T=create_BT();   //根据广义表构建树
    i=layer(T);     //按层遍历，从右至左
    deep=a[i][1];
    for(;i>=0;i--)
    {
        if(deep!=a[i][1])     //深度不同，换行
        {
            cout<<endl;
            deep=a[i][1];
        }
        cout<<a[i][0]<<' ';
    }
    return 0;
}
