#include <iostream>
#include<string>
using namespace std;
#define max 100
int i1,i2,k,n;
typedef struct
{
    int weight;
    int lchild,rchild,parent;
}HTNode,*HTree;
void select(HTree HT,int u,int &i1,int &i2)//i1,i2返回的为parent！=1的最小权值所对应的（0 1 2 ....）
{
    int flag=0;
    for(int p=0;p<u;p++)
    {
        if(HT[p].parent==-1)
        {
            if(flag==0)
            { i1=p; flag=1;}
            else
            {
                i2=p;break;
            }
        }
    }
    if(i1>i2) {int temp;temp=i1;i1=i2;i2=temp;}
    for(int i=0;i<u;i++)
    {
        if(HT[i].weight<HT[i1].weight&&HT[i].parent==-1)
        {
            i2=i1;
            i1=i;
        }
        else if(HT[i].weight<HT[i2].weight&&HT[i].weight>HT[i1].weight&&HT[i].parent==-1)
        {
            i2=i;
        }
    }
}
void HuffmanTree(HTNode HuffmanTree[],int *w,int n)//初始化新创建的一个赫夫曼树
{
    for(int i=0;i<2*n-1;i++)//初始都无父母和左右孩子
    {
        HuffmanTree[i].parent=-1;
        HuffmanTree[i].lchild=-1;
        HuffmanTree[i].rchild=-1;
    }
    for(int i=0;i<n;i++)//赋权值
    {
    HuffmanTree[i].weight=w[i];
        cout<<w[i]<<endl;
    }
    for(int k=n;k<2*n-1;k++)//创建新结点（创建树）
    {
        select(HuffmanTree,k,i1,i2);
        HuffmanTree[k].weight=HuffmanTree[i1].weight+HuffmanTree[i2].weight;
        HuffmanTree[i1].parent=k;
        HuffmanTree[i2].parent=k;
        HuffmanTree[k].lchild=i1;
        HuffmanTree[k].rchild=i2;
    }
}
void huffmanCoding(HTree &huffTree,char huffCode[],int n)//生成编码
{
    char temp[n];//定义工作空间，存储临时产生的编码串
    temp[n-1]='\0';
    for(int i=0;i<n;i++)
    {
        int start=n-1;
        int pos=i;//pos:正在处理的当前位置
        int parent=huffTree[i].parent;//找到父结点
        while(parent!=-1)
        {
            if(huffTree[parent].lchild==pos)//判断当前是左孩子还是右孩子
                temp[--start]='0';
            else temp[--start]='1';
            pos=parent;//当前位置移动到父结点
            parent=huffTree[parent].parent;//更新父结点
        }
        char huffCode[n-start];//建立哈夫曼编码实际需要的内存空间
        strcpy(huffCode,&temp[start]);//临时存储的哈夫曼编码存储到huffCode中
        cout<<huffCode<<endl;
    }
}
void TranCode(HTree &HT,char a[],char zf[],char b[],int n)//生成译码
{
    int q=2*n-2;
    int k=0,i=0;
    for(i=0;a[i]!='\0';i++)
    {
        if(a[i]=='0') q=HT[q].lchild;
        else if(a[i]=='1') q=HT[q].rchild;
        if(HT[q].lchild==-1&&HT[q].rchild==-1)
        {
            b[k++]=zf[q];
        q=2*n-2;
        }
    }
    b[k]='\0';
}
int main()
{
    cout<<"请输入结点个数"<<endl;
    cin>>n;
    cout<<"请依次输入"<<n<<"个字符："<<endl;
    char zf[max];
    for(int k=0;k<n;k++)
    cin>>zf[k];
    cout<<"请输入"<<n<<"个权值："<<endl;
    int w[n];
    for(int m=0;m<n;m++)
        cin>>w[m];
    HTNode huffman[2*n-1];
    HTree htree = huffman;
    HuffmanTree(htree,w,n);
    for(int i=0;i<2*n-1;i++)
    cout<<huffman[i].weight<<' '<<huffman[i].parent<<' '<<huffman[i].lchild<<' '<<huffman[i].rchild<<endl;
    char huffCode[n];
    huffmanCoding(htree,huffCode,n);
    cout<<"请输入想要翻译的一串二进制编码："<<endl;
    char a[max];char b[max];
    cin>>a;
    TranCode(htree,a,zf,b,n);
    cout<<"翻译结果："<<endl;
    cout<<b;
    return 0;
}
