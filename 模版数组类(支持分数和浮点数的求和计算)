#include <iostream>
#include <vector>
using namespace std;
//求最大公约数
int measure(int a, int b)
{
  int z=a%b;
  while(z!=0)
    {
      a=b;
      b=z;
      z=a%b;
    }
  return b;
}
template <typename T>
class Array
{
//请完成类的设计
public:
    Array(int n);
    void input(int n);
    T &operator [](int i);
private:
    vector<T>p;
};
template <typename T>
Array<T>::Array(int n)
{
    p.resize(n);
}
template <typename T>
void Array<T>:: input(int n)
{
    for(int i=0;i<n;i++)
        cin>>p[i];
}
template <typename T>
T &Array<T>:: operator [](int i)
{
        return p[i];
}

class Fract
{
//请完成类的设计
public:
    Fract();
    Fract(int b1,int m1);
    void show();
    Fract &operator +=(const Fract &a);
    friend istream & operator>>(istream & input,Fract &c);
private:
    int b,m;
};
Fract::Fract()
{
    b=0;m=0;
}
Fract::Fract(int b1,int m1)
{
    int a = 1;
    a=measure(b1,m1);
    b=b1/a;m=m1/a;
}
istream & operator>>(istream & input,Fract &c)
{
    input>>c.b>>c.m;
    return input;
}
Fract &Fract::operator +=(const Fract &a)
{
    int b2,m2,s=1;
    m2=a.m*m;
    b2=a.b*m+a.m*b;
    s=measure(b2,m2);
    b2=b2/s;m2=m2/s;
    Fract q(b2,m2);
    *this=q;
    return *this;
}
void Fract::show()
{
    int a;
    if(b==0) cout<<'0';
    else
    {
    a=measure(b,m);
    b=b/a;m=m/a;
        if(m==1) cout<<b;
        else cout<<b<<'/'<<m;
    }
}
int main()
{
    unsigned int n;
    cin >> n;
    Array<double> db(n);
    db.input(n);
    double dbsum(0.0);
    for (unsigned int i = 0; i < n; i++)
        dbsum += db[i];
    cout << dbsum << endl;

    cin >> n;
    Array<Fract> fr(n);
    fr.input(n);
    Fract frsum(0, 1);
    for (unsigned int i = 0; i < n; i++)
        frsum += fr[i];
    frsum.show();
}
