#include<iostream>
#include<cstring>
using namespace std;
#define max 100
typedef struct node
{
    char data;
    int depth; //深度
    struct node *lchild, *rchild;
}BTNode, *BTREE;
BTREE create_BT()
{
    BTREE stack[max],p=NULL,T=NULL;
    char ch,s[max],x=0;
    int flag=0,top=-1,i=0; long int len;
    cin>>s;
    len=strlen(s);
    while(1)
    {
        ch=s[i];
        if(s[i]>='a'&&s[i]<='z')//数字转换
               {
                   x=s[i];i++;
               }
               else
                   i++;//读下一个字符
        if(ch=='\n'||i>= len) //'\n'或者是s[]到头
            return T;
        else
        {
            switch(ch)
            {
                case '(':  stack[++top]=p;
                           flag=1;
                           break;
                case ')':  top--;
                           break;
                case ',':  flag=2;
                           break;
                default :  p=(BTREE)malloc(sizeof(BTNode));
                           p->data=x;
                           p->depth=0;
                           p->lchild=NULL;
                           p->rchild=NULL;
                           if(T==NULL)
                           {
                                T=p;
                                p->depth=1;            //记录深度
                           }
                           else if(flag==1)
                                {
                                    stack[top]->lchild=p;
                                    p->depth=top+2;    //记录深度
                                }
                           else
                                {
                                    stack[top]->rchild=p;
                                    p->depth=top+2;    //记录深度
                                }
            }
        }
    }
}
int m=1;
int judge(BTREE T,BTREE T1)
{
    if(T->lchild==NULL&&T1->lchild==NULL);
    else if(T->rchild==NULL&&T1->rchild==NULL);
    else if(T->lchild==NULL&&T1->lchild!=NULL) m=0;
    else if(T->rchild==NULL&&T1->rchild!=NULL) m=0;
    else if(T->lchild!=NULL&&T1->lchild==NULL) m=0;
    else if(T->rchild!=NULL&&T1->rchild==NULL) m=0;
    else if(T->lchild!=NULL&&T1->lchild!=NULL) {judge(T->lchild,T1->lchild);}
    else if(T->rchild!=NULL&&T1->rchild!=NULL) {judge(T->rchild,T1->rchild);}
    else m=0;
    return m;
}
 
int main()
{
    BTREE T;int m=0;
    T=create_BT();   //根据广义表构建树
    if(T->lchild==NULL&&T->rchild==NULL) m=1;
    if((judge(T->lchild,T->rchild))||m==1) cout<<"true";
    else cout<<"false";
    return 0;
}

