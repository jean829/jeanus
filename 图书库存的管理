#include  <iostream>
#include<cstring>
using  namespace  std;
 class  Book
{
//请在此处补充Book类的定义
public:
    Book();
    virtual ~Book();
    Book(const Book& other);
    unsigned int GetID();
    void SetID(unsigned int m_ID);
    string GetName();
    void SetName(string m_Name);
    string GetIntroduction();
    void SetIntroduction(string m_Introduction);
    string GetAuthor();
    void SetAuthor(string m_Author);
    string GetDate();
    void SetDate(string m_Date);
    unsigned int GetPage();
    void SetPage(unsigned int m_Page);
private:
    unsigned int m_ID;//编号
    string m_Name;//书名
    string m_Introduction; //简介
    string m_Author;//作者
    string m_Date;//日期
    unsigned int m_Page;//页数
};
//请在此处补充Book类的成员函数实现
Book::Book()
{
    m_ID=0;
}
Book::Book(const Book& other)
{
    SetID(other.m_ID); SetName(other.m_Name); SetIntroduction(other.m_Introduction);
    SetAuthor(other.m_Author); SetDate(other.m_Date); SetPage(other.m_Page);
}
Book::~Book()
{
    
}
unsigned int Book::GetID()
{
    return m_ID;
}
void Book::SetID(unsigned int m_ID)
{
    this->m_ID=m_ID;
}
string Book::GetName()
{
    return m_Name;
}
void Book::SetName(string m_Name)
{
    this->m_Name=m_Name;
}
string Book::GetIntroduction()
{
    return m_Introduction;
}
void Book::SetIntroduction(string m_Introduction)
{
    this->m_Introduction=m_Introduction;
}
string Book::GetAuthor()
{
    return m_Author;
}
void Book::SetAuthor(string m_Author)
{
    this->m_Author=m_Author;
}
string Book::GetDate()
{
    return m_Date;
}
void Book::SetDate(string m_Date)
{
    this->m_Date=m_Date;
}
unsigned int Book::GetPage()
{
    return m_Page;
}
void Book::SetPage(unsigned int m_Page)
{
    this->m_Page=m_Page;
}
class  Store
{
//请在此处补充Store类的定义
public:
    unsigned int GetCount();
    void SetCount(unsigned int m_Count);
    Store();
    Store(int n);
    virtual ~Store();
    Store(const Store& other);
    void in(Book &b);
    void out(string name);
    Book findbyName(string name);
    Book findbyID(int ID);
    void printList();
private:
    Book *m_pBook;
    unsigned int m_Count;
};
//请在此处补充Store类的成员函数实现
unsigned int Store::GetCount()
{
    return m_Count;
}
void Store::SetCount(unsigned int m_Count)
{
    this->m_Count=m_Count;
}
Store::Store()
{
    SetCount(0);
    m_pBook=0;
    cout<<"Store default constructor called!"<<endl;
}
Store::Store(int n)
{
    SetCount(n);
    m_pBook=new Book[n];
    cout<<"Store constructor with (int n) called!"<<endl;
}
Store::~Store()
{
    SetCount(0);
    if(m_pBook!=0) delete []m_pBook;
    cout<<"Store destructor called!"<<endl;
}
Store::Store(const Store& other)
{
    this->m_pBook=other.m_pBook;
    m_Count=other.m_Count;
    cout<<"Store copy constructor called!"<<endl;
}
void Store::in(Book &b)
{
    //可以通过新申请一个空间，并将原有数据拷贝进新空间，同时将新增的书放在数组最后一个元素，再释放原有空间，从而实现数组大小的动态调整。
    Book *m_pBook1;
    m_pBook1=new Book[m_Count+1];
    m_Count++;
    for(int i=0;i<m_Count-1;i++)
    {
        m_pBook1[i]=m_pBook[i];
    }
    m_pBook1[m_Count-1]=b;
    delete[]m_pBook;
    m_pBook=m_pBook1;
}
void Store::out(string name)
{
   //注意因为删除了一本书，所以需要减少一个存储空间。提示：可以通过新申请一个空间，并将未被删除的部分拷贝进新空间，再释放原有空间，从而实现数组大小的动态调整。
    Book *m_pBook1,p;
    m_pBook1=new Book[m_Count-1];
    m_Count--;
    p=findbyName(name);
    for(int i=0;i<p.GetID()-1;i++)
    {
        m_pBook1[i]=m_pBook[i];
    }
    for(int i=p.GetID();i<m_Count+1;i++)
    {
        int j=p.GetID()-1;
            m_pBook1[j]=m_pBook[i];
        j++;
    }
    delete[] m_pBook;
    m_pBook=m_pBook1;
}
Book Store::findbyID(int ID)
{
    //如果找到，则返回一个Book对象，Book对象中存储了对应书本的信息；如果找不到，则返回一个Book对象，Book对象的m_ID为0，
    int j=0,i=0;
    Book p;
    for(i=0;i<m_Count;i++)
        if(m_pBook[i].GetID()==ID)
            {j=1; break;}
        else continue;
    if(j==1) return m_pBook[i];
    else return p;
}
Book Store::findbyName(string name)
{
    //要求根据给定的书名查找图书，如果找到，则返回一个Book对象，Book对象中存储了对应书本的信息；如果找不到，则返回一个Book对象，Book对象的m_ID为0，表示未被初始化。
    int j=0,i=0;
    Book p;
     for(i=0;i<m_Count;i++)
         if(m_pBook[i].GetName()==name)
             {j=1; break;}
         else continue;
     if(j==1) return m_pBook[i];
     else return p;
}
void Store::printList()
{
    cout<<"There are totally "<<m_Count<<" Books:"<<endl;
    int i=0;
    for(i=0;i<m_Count;i++)
    {
         cout<<"ID="<<m_pBook[i].GetID()<<"; "<<"Name:"<<m_pBook[i].GetName()<<"; "<<"Author:"<<m_pBook[i].GetAuthor()<<"; "<<"Date:"<<m_pBook[i].GetDate()<<";"<<endl;
    }
}
int  main()
{
        Store  s;
        Book  b1,b2,b3;
        b1.SetID(1);
        b1.SetName("C++  语言程序设计(第4版)");
        b1.SetAuthor("郑莉");
        b1.SetIntroduction("介绍C++及面向对象的知识");
        b1.SetDate("201007");
        b1.SetPage(529);
        b2.SetID(2);
        b2.SetName("离散数学");
        b2.SetAuthor("左孝凌");
        b2.SetIntroduction("介绍命题逻辑、谓词逻辑、集合论、代数系统和图论");
        b2.SetDate("198209");
        b2.SetPage(305);
        b3.SetID(3);
        b3.SetName("c程序设计");
        b3.SetAuthor("谭浩强");
        b3.SetIntroduction("介绍C程序设计中的基本知识，如语句格式、语法等");
        b3.SetDate("201006");
        b3.SetPage(355);

        cout<<"第一本书入库"<<endl;
        s.in(b1);
        cout<<"第二本书入库"<<endl;
        s.in(b2);
        cout<<"第三本书入库"<<endl;
        s.in(b3);
        cout  <<"现有库存书籍数量："<<s.GetCount()  <<  endl;
        cout  <<"查找并出库图书：离散数学"  <<  endl;
        Book  tmpbook=s.findbyName("离散数学");
        if(tmpbook.GetID()!=0)
        {
                s.out("离散数学");
                cout  <<"离散数学  已成功出库"  <<  endl;
        }
        else
                cout<<"没有找到name为离散数学的书"<<endl;
        cout  <<"现有库存书籍数量："<<s.GetCount()  <<  endl;

        cout  <<"查找图书  ID：3"  <<  endl;
        tmpbook=s.findbyID(3);
        if(tmpbook.GetID()!=0)
                cout<<"找到ID为"<<3<<"的书，书名："<<tmpbook.GetName()<<endl;
        else
                cout<<"没有找到ID为"<<3<<"的书"<<endl;

        cout  <<"查找图书  name：离散数学"  <<  endl;
        tmpbook=s.findbyName("离散数学");
        if(tmpbook.GetID()!=0)
                cout<<"找到name为离散数学的书，ID："<<tmpbook.GetID()<<endl;
        else
                cout<<"没有找到name为离散数学的书"<<endl;

        cout<<"输出所有库存图书的信息"<<endl;
        s.printList();
        cout<<"程序运行结束"<<endl;
        return  0;
}
